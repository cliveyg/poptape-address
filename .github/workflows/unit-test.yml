name: Unit tests
on: 
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
  - cron: '0 10 * * 1' # run "At 10:00 on Monday"

jobs:
  # Run code tests before building the image, to ensure it is good to go
  unit-tests:
    name: Run code tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12'] # Using a list so it's extensible for future use
    services:
      # label used to access the service container
      postgres:
        # dockerhub image
        image: postgres
        # provide the login and db deets for postgres
        env:
          POSTGRES_DB: poptape_address_test
          POSTGRES_PASSWORD: ${{ secrets.TESTDB_PASSWORD }}
          POSTGRES_USER: poptape_address_test
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:

      - name: Install postgres client
        run: |
          sudo apt-get update && sudo apt-get install --yes --no-install-recommends postgresql-client

      - uses: actions/checkout@v4
      - name: Setting up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # have to create an .OLDenv file to be able to run unit tests
      - name: Create .OLDenv file from github secrets
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env

      - name: Create DB tables
        run: |
          psql -h localhost -U poptape_address_test password=${{ secrets.TESTDB_PASSWORD }} -f db_schema/poptape_address_db_schema.sql
          psql -h localhost -U poptape_address_test password=${{ secrets.TESTDB_PASSWORD }} -c '\dt'

      - name: Test with pytest
        # the bash script doesn't print coverage report if fail-under flag is set and the
        # test fails coverage it gives an exit code of 2 and immediately stops without printing report
        # hence running it twice so I can see what lines are missing from coverage
        run: |
          touch poptape_address.log
          coverage run -m pytest -v --junitxml=junit.xml --html=report.html
          coverage xml
          echo "$(coverage report -m )"
          covRes="$(coverage report -m --fail-under=95)"
          echo "$covRes"

      - name: Create coverage badges
        uses: gaelgirodon/ci-badges-action@v1
        with:
          gist-id: 60b6fa4efc8e71a0dae17eee4b2949df
          token: ${{ secrets.GIST_TOKEN }}
